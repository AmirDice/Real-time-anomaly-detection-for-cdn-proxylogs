version: "3"

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:6.2.0
    environment:
      - ZOOKEEPER_CLIENT_PORT=32181
    ports:
      - 32181:32181
    networks:
      - anomaly-cdn-network

  kafka:
    image: confluentinc/cp-kafka:6.2.0
    container_name: kafka
    depends_on:
      - zookeeper
    networks:
      - anomaly-cdn-network
    ports:
      - 9092:9092
      - 30001:30001
    environment:
      KAFKA_CREATE_TOPICS: CDN:1:1,PCDN:2:1
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:32181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 100 
      
  pyspark:
    container_name: pyspark
    image: docker.io/bitnami/spark:3
    hostname: spark
    build: ./spark
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    ports:
        - 8080:8080
    networks:
        - anomaly-cdn-network
    volumes:
        - ./spark:/sparkScripts:rw


  influxdb:
    image: influxdb:2.1.1
    volumes:
      - influxdb-storage:/var/lib/influxdb2:rw
    env_file:
      - .env
    entrypoint: ["./entrypoint.sh"]
    restart: on-failure:10
    ports:
      - ${DOCKER_INFLUXDB_INIT_PORT}:8086
    networks:
      - anomaly-cdn-network

  telegraf:
    image: telegraf:1.22
    volumes:
      - ${TELEGRAF_CFG_PATH}:/etc/telegraf/telegraf.conf:rw
    env_file:
      - .env
    depends_on:
      - influxdb
    networks:
      - anomaly-cdn-network
  
  # cdn-con-prod:      
  #   image: cdn-con-prod
  #   container_name: cdn-con-prod
  #   build: ./
  #   depends_on:
  #     - kafka
  #   networks:
  #     - anomaly-cdn-network

networks:
  anomaly-cdn-network:
    driver: bridge

volumes:
  # grafana-storage:
  # chronograf:
  influxdb-storage:

  # grafana:
  #   image: grafana/grafana-oss:8.4.3
  #   volumes:
  #     - grafana-storage:/var/lib/grafana:rw
  #   depends_on:
  #     - influxdb
  #   ports:
  #     - ${GRAFANA_PORT}:3000
  #   networks:
  #     - anomaly-cdn-network


  # chronograf:
  #   image: chronograf:latest
  #   hostname: chronograf
  #   container_name: chronograf
  #   ports:
  #     - 8080:8080
  #   links:
  #     - influxdb
  #   depends_on:
  #     - influxdb
  #   volumes:
  #     - chronograf:/var/lib/chronograf
  #   environment:
  #     - PORT=8080
  #   networks:
  #     - anomaly-cdn-network
  




  # myconsumer-app:
  #   container_name: myconsumer
  #   build: .\kafka
  #   depends_on:
  #     - kafka
  #     - ksql-server
  #     - ksql-cli
  #     - influxdb
  #   command:
  #     - /bin/sh
  #     - -c
  #     - |
  #       apk add --no-cache curl;
  #       echo Waiting for influxdb API ...;
  #       while ! nc -z influxdb 8086;
  #       do
  #         sleep 5;
  #       done;
  #       echo InfluxDB Ready ...; python cdncons.py
  #   networks:
  #     - anomaly-cdn-network


# /opt/kafka_2.11-0.10.1.0/bin/kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic CDN